# 项目相关配置
ruoyi:
  #备案号
  icp: ${INTERNET_CONTENT_PROVIDER:}
  #当前代码线版本
  version: ${VERSION:TAG_VERSION}
  releaseNotes: ${RELEASE_NOTES:https://xsxda94vjq.feishu.cn/docs/doccnMJuJvbFpkRdLYq7a0Q7l5d}
  file:
    startCosUpload: ${START_COS_UPLOAD:false}
#腾讯云对象存储
    cos:
      # 访问API密钥，用于生成签名验证
      secretId: ${COS_SECRET_ID:}
      secretKey: ${COS_SECRET_KEY:}
      # COS地域简称，具体可参照（https://cloud.tencent.com/document/product/436/6224）
      region: ${COS_REGION:}
      # 存储桶名称 + APPID 组合
      bucketName: ${COS_BUCKET_NAME:}
      # 云存储文件上传地址：bucketName + region + (myqcloud.com 腾讯云域名，固定字符) 示例（https://free-1253559996.cos.ap-guangzhou.myqcloud.com）
      cosImgUrlPrefix: ${COS_COS_IMG_URL_PREFIX:}
    # 允许上传的文件后缀
    allowUploadExtensionList: ${ALLOW_UPLOAD_EXTENSION_LIST:png, jpg, jpeg, gif, doc, docx, pdf, xlsx, xls, csv, txt, zip, rar, ppt, pptx, mp3, mp4, wav}
  # 文件路径 示例（ Windows配置D:/ruoyi/uploadPath，Linux配置 /app/project/pic）
  # 获取ip地址开关
  addressEnabled: true
  # 验证码类型 math 数组计算 char 字符验证
  captchaType: ${CAPTCHA_TYPE:math}
  # 登录密码RSA公钥 生成规则: PCKS#8 1024bit （不包含前后缀）
  loginRsaPublicKey: ${LOGIN_RSA_PUBLIC_KEY:MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAm/peY4wS5+9Y1Bu/+YPEEWnpX5hEGvhrAQIkSAzQ//aOu90U+Z3shdq0DU8qxEnWDjzD5CFRpMTksBcNfYPNulHl1ekYu7oGkAwsqPIFQuKsnhuhuEKQ6IXPjHGCvW4HsonGAM7PpfHsxAh5HfEE+6PAeZGld8n1PAN6mdUGsznstc2nxzr+Agpjal8Efo+9AYU+jnn4Ro0TfDl4a0qNx1rar/GvoPMudS0DWk96OMNAgOzC1pE+Jr3C1AdNMbo1PhtG7Cf4Ukt89zFTVnM2ZpkbGlI4U3gAlb0++KvlLbrf84Tf7feOYNO+I4eNjwTiS59A2mAi6OJUdAalnPxrgwIDAQAB}
  # 登录密码RSA私钥 同上
  loginRsaPrivateKey: ${LOGIN_RSA_PRIVATE_KEY:MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCb+l5jjBLn71jUG7/5g8QRaelfmEQa+GsBAiRIDND/9o673RT5neyF2rQNTyrESdYOPMPkIVGkxOSwFw19g826UeXV6Ri7ugaQDCyo8gVC4qyeG6G4QpDohc+McYK9bgeyicYAzs+l8ezECHkd8QT7o8B5kaV3yfU8A3qZ1QazOey1zafHOv4CCmNqXwR+j70BhT6OefhGjRN8OXhrSo3HWtqv8a+g8y51LQNaT3o4w0CA7MLWkT4mvcLUB00xujU+G0bsJ/hSS3z3MVNWczZmmRsaUjhTeACVvT74q+Utut/zhN/t945g074jh42PBOJLn0DaYCLo4lR0BqWc/GuDAgMBAAECggEAQ/IGEP4xNCievNMTxvj/vYgx+YsGS+tgDXHl5R70IjRAzBRL8Uq6gDqbiVqtqhDx9oTA3o0nGAwPBKgeH8l9IkdPw+WE+S3ZcwFiqPu4kADXKg6mXXJd1nSHy0mdJrCaGMuMXci5SrP+rAx22jSmM4oLK8nm1y46LjjjvMQ/5W1Jj+1bEWfZfq0WyLf8twOZn9b08jvpPlHt5SkKyjmXF2ZcxM6iJr4mTfondn3pPJWoj8KNXahAZoQCBekedW/7oT4Pqg+T4Ka3gIEwD74anljx0a7Z5NPA7DBEyr+uN7jM6sZ2QgZxbohh4OGFjxF2OHmN5j7MK2u/LG2WchS1xQKBgQD3twqjURfwfGAj6GQAhUu362fE2Ym7t+MmpSN4TLjSUCc3P3hp1MVPrI1aifl7FZQL62AK0tCVWQ44rwroOS5KQcOvxth78Qgsk27CnZiUX2JnHIOYOzV8aH1d2Csapd14wz3ggSi76tHP/sZDAifcluCR8zXCTMFbaruS24drHwKBgQChMd3XxEFhei6JeIyRMY3wkMSJRISZWQZiTPlHa2/o4Cd5EV0xNuiVtFKCvN+ub+wP7VCqE+fq0Uu62uJb/V8V98tIEmjy4kTHXnMiIDQ3acM5/diQl+bteFf2AuupmFeH0vKlxEI4qjB3YAwK1BuI1XtLvbVbMjtAFPLBqMqXHQKBgA/5K6RwXDzTqFdoatplvgY0FdLpvCnwp6McTvc460oUhRLY8ujQIZELrWnDL+Ux9QP3v4+zHGQlA/e/wdJLraJ4LygsiFUlq8NEFoZSJz6aD/xaKFoupzpIep0MjWsAexGIdXr+mSPU9oaVBS/Y+b0NtZlzt2m6DVXZwhKsOUU9AoGAPaR6N5b/ga1duoh1CNkwdHyIDA49vv7CaDkTYvJ8+0stDSlMwBNFYmpw2zorN+PpHDYekMvH9o5PLYei5JbCE/6MqGUR6UAKGUvPL4+tKDuzwquGc9UDJHDPAm8fe92cK37J+AZTZKQAoMYEFOgEF5G78rz7a4KMEfdw1gocXykCgYBCLJQHJufoodu4vxoiz2s6NvYowKdNreUnerWEByNb1XenHEhZZHLcowGTOEc0TT/HpKeagPsLq1soq3MWNpFU0su1nquOR7OPAumMs+9VCNl5XDEILwkTGsSExlrvGhpjtgL9JBDMDjbIBoItIGvKBi3e2y3nJwI7V6BaBWX35g==}
  # 企业微信用户首次登录系统默认密码
  weUserDefaultPwd: admin
  # 默认应用名
  defaultAppName: ${DEFAULT_APP_NAME:easyInk}
  # 服务器类型： internal内部应用，third三方应用
  serverType: ${SERVER_TYPE:internal}
  # 是否允许返回异常详情给前端
  enableExceptionDetailResp: ${ENABLE_EXCEPTION_DETAIL_RESP:false}
  # 三方应用默认配置 （自建应用不需要配置）
  thirdDefaultDomain:
    # 前端页面地址
    dashboard: ${DASHBOARD:}
    # 侧边栏地址
    sidebar: ${SIDEBAR:}
    # 后台地址
    scrm: ${SCRM:}
  # 服务商信息 （自建应用不需要配置）
  provider:
    # 服务商的企业ID
    corpId: ${PROVIDER_CORP_ID:}
    # 服务商的Secret
    secret: ${PROVIDER_SECRET:}
    # 约定的Token
    token: ${PROVIDER_TOKEN:}
    # 约定的解码EncodingAesKey
    encodingAesKey: ${PROVIDER_ENCODING_AES_KEY:}
    # 三方应用信息 （自建应用不需要配置此项）
    webSuite:
      # 三方应用的SuiteId
      suiteId: ${WEB_SUITE_ID:}
      # 三方应用的Secret
      secret: ${WEB_SUITE_SECRET:}
      # 约定的Token
      token: ${WEB_SUITE_TOKEN:}
      # 约定的解码EncodingAesKey
      encodingAesKey: ${WEB_SUITE_ENCODING_AES_KEY:}
    # 代开发应用信息 （自建应用不需要配置此项）
    dkSuite:
      # 代开发应用的模板ID
      dkId: ${DK_SUITE_ID:}
      # 代开发应用的模板Secret
      secret: ${DK_SUITE_SECRET:}
      # 约定的Token
      token: ${DK_SUITE_TOKEN:}
      # 约定的解码EncodingAesKey
      encodingAesKey: ${DK_SUITE_ENCODING_AES_KEY:}
      # 代开发授权二维码图片地址
      dkQrCode: ${DK_QRCODE:}
  # 自建应用信息
  selfBuild:
    # 约定的Token
    token: ${SELF_BUILD_TOKEN:3lTqc9EEO}
    # 约定的解码EncodingAesKey
    encodingAesKey: ${SELF_BUILD_ENCODING_AES_KEY:1K3K7DD74kbNNu58De5R7xoi2CyYxBdyxv8UHibVLoZ}
    #匿名访问的URL
  anonUrl:
      - /wecom/radar/clickRadar
      - /wecom/lockSideBar/get
      - /lockToken
      - /system/user/transferDbPassword
      - /wecom/form/commit
      - /wecom/form/getContent
      - /wecom/weopen/callback/**
      - /wecom/updateid
      - /login
      - /captchaImage
      - /findWxQrLoginInfo
      - /wxQrLogin
      - /profile/**
      - /common/download**
      - /common/download/resource**
      - /common/download/url**
      - /swagger-ui.html
      - /doc.html
      - /swagger-resources/**
      - /webjars/**
      - /*/api-docs
      - /v2/**
      - /v3/**
      - /api/**
      - /favicon.ico
      - /basic/**
      - /wecom/callback/**
      - /wecom/chat/collection/list
      - /wecom/chat/collection/cancleCollection
      - /wecom/chat/collection/addCollection
      - /wecom/fission/poster
      - /wecom/fission/complete/**
      - /wecom/fission/*/progress/*
      - /wecom/reward/getRewardByFissionId/**
      - /wecom/groupCode/getActualCode/**
      - /weixin/auth/**
      - /common/findFile
      - /wecom/chat/side/getCorpInfo
      - /qrCodeLogin
      - /qrCodeLogin3rd
      - /webLogin
      - /loginHandler
      - /wecom/3rdapp/getServerType
      - /wecom/3rdapp/getPreAuthCode
      - /wecom/3rdapp/getPreLoginParam
      - /wecom/3rdapp/getPermanentCode
      - /wecom/plus/**
      - /wecom/order/login
      - /wecom/order/getNetworkList
      - /url/**
      - /wechatopen/getAppIdByShortCode
      - /wechatopen/getAppIdByFormId
      - /wechatopen/openId
      - /wechatopen/getAuthCode
      - /unionId/getByExternalUserId
      - /test/**
      - /getPublicKey
      - /url
      - /wecom/transferData/**
      - /actuator/**
      - /wecom/user/briefListNew
      - /open_api/**
# 开发环境配置
server:
  # 服务器的HTTP端口，默认为8090
  port: ${SERVER_PORT:8090}
  servlet:
    # 应用的访问路径
    context-path: /
  tomcat:
    # tomcat的URI编码
    uri-encoding: UTF-8

# 日志配置
logging:
  # 日志级别 ALL < TRACE < DEBUG < INFO < WARN < ERROR < FATAL < OFF
  level:
    com.ruoyi: ${COM_RUOYI:info}
    org.springframework: ${ORG_SPRINGFRAMEWORK:warn}
  file:
    # 日志文件存放位置
    path: ${LOG_PATH:./logs}
    # 日志文件要保留的归档的最大天数
    max-history: ${LOG_MAX_HISTORY:15}
    # 日志名称
    name: ${LOG_NAME:/wecom}

# Spring配置
spring:
  # 资源信息
  messages:
    # 国际化资源文件路径
    basename: i18n/messages
  datasource:
        type: com.alibaba.druid.pool.DruidDataSource
        driverClassName: com.mysql.cj.jdbc.Driver
        druid:
            # 主库数据源
            master:
              url: jdbc:mysql://${MYSQL_SERVICE_HOST:110.42.233.89}:${MYSQL_SERVICE_PORT:3306}/${MYSQL_SERVICE_DB_NAME:wecomscrm}?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8&allowMultiQueries=true
              username: ${MYSQL_SERVICE_USERNAME:qianyi}
              password: ${MYSQL_SERVICE_PASSWORD:GMSch6Mr6DJ5zcm2}
            # 从库数据源
            slave:
                # 从数据源开关/默认关闭
                enabled: ${MYSQL_SERVICE_SLAVE_ENABLED:false}
                url: jdbc:mysql://${MYSQL_SERVICE_SLAVE_HOST:wecommysql}:${MYSQL_SERVICE_SLAVE_PORT:3306}/${MYSQL_SERVICE_DB_SLAVE_NAME:wecomscrm}?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8
                username: ${MYSQL_SERVICE_SLAVE_USERNAME:}
                password: ${MYSQL_SERVICE_SLAVE_PASSWORD:}
            # 初始连接数
            initialSize: ${MYSQL_SERVICE_INITIAL_SIZE:5}
            # 最小连接池数量
            minIdle: ${MYSQL_SERVICE_MIN_IDLE:10}
            # 最大连接池数量
            maxActive: ${MYSQL_SERVICE_MAX_ACTIVE:20}
            # 配置获取连接等待超时的时间
            maxWait: ${MYSQL_SERVICE_MAX_WAIT:60000}
            # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
            timeBetweenEvictionRunsMillis: ${MYSQL_SERVICE_TIME_BETWEEN_EVICTION_RUNS_MILLIS:60000}
            # 配置一个连接在池中最小生存的时间，单位是毫秒
            minEvictableIdleTimeMillis: ${MYSQL_SERVICE_MIN_EVICTABLE_IDLE_TIME_MILLIS:300000}
            # 配置一个连接在池中最大生存的时间，单位是毫秒
            maxEvictableIdleTimeMillis: ${MYSQL_SERVICE_MAX_EVICTABLE_IDLE_TIME_MILLIS:900000}
            # 配置检测连接是否有效
            validationQuery: SELECT 1 FROM DUAL
            testWhileIdle: ${MYSQL_SERVICE_TEST_WHILE_IDLE:true}
            testOnBorrow: ${MYSQL_SERVICE_TEST_ON_BORROW:false}
            testOnReturn: ${MYSQL_SERVICE_TEST_ON_RETURN:false}
            webStatFilter:
                enabled: ${MYSQL_SERVICE_WEB_STAT_FILTER_ENABLED:true}
            statViewServlet:
                enabled: ${MYSQL_SERVICE_STAT_VIEW_SERVLET_ENABLED:false}
                # 设置白名单，不填则允许所有访问
                allow:
                url-pattern: ${MYSQL_SERVICE_STAT_VIEW_SERVLET_URL_PATTERN:/druid/*}
                # 控制台管理用户名和密码
                login-username: ${MYSQL_SERVICE_STAT_VIEW_SERVLET_LOGIN_USERNAME:}
                login-password: ${MYSQL_SERVICE_STAT_VIEW_SERVLET_LOGIN_PASSWORD:}
            filter:
                stat:
                    enabled: ${MYSQL_SERVICE_FILTER_STAT_ENABLED:true}
                    # 慢SQL记录
                    log-slow-sql: ${MYSQL_SERVICE_FILTER_STAT_LOG_SLOW_SQL:true}
                    slow-sql-millis: ${MYSQL_SERVICE_FILTER_STAT_SLOW_SQL_MILLIS:1000}
                    merge-sql: ${MYSQL_SERVICE_FILTER_STAT_MERGE_SQL:false}
                wall:
                    config:
                        multi-statement-allow: ${MYSQL_SERVICE_WALL_CONFIG_MULTI_STATEMENT_ALLOW:true}
  # 文件上传
  servlet:
     multipart:
       # 单个文件大小
       max-file-size: ${SERVLET_MULTIPART_MAX_FILE_SIZE:50MB}
       # 设置总上传的文件大小
       max-request-size: ${SERVLET_MULTIPART_MAX_REQUEST_SIZE:50MB}
  task:
    execution:
      pool:
        # 线程所允许的空闲时间
        keep-alive: ${TASK_POOL_KEEP_ALIVE:10s}
      # 线程名称前缀
      thread-name-prefix: ${TASK_POOL_THREAD_NAME_PREFIX:common-pool-}
  # 服务模块
  devtools:
    restart:
      # 热部署开关
      enabled: true
  # redis 配置
  redis:
    # 地址
    host: ${REDIS_SERVICE_HOST:110.42.233.89}
    # 端口，默认为6379
    port: ${REDIS_SERVICE_PORT:6379}
    # 密码
    password: ${REDIS_SERVICE_PASSWORD:123456}
    # 连接超时时间
    timeout: ${REDIS_SERVICE_TIMEOUT:10s}
    database: ${REDIS_SERVICE_DATABASE:15}
    lettuce:
      pool:
        # 连接池中的最小空闲连接
        min-idle: ${REDIS_POOL_MIN_IDLE:0}
        # 连接池中的最大空闲连接
        max-idle: ${REDIS_POOL_MAX_IDLE:8}
        # 连接池的最大数据库连接数
        max-active: ${REDIS_POOL_MAX_ACTIVE:8}
        # #连接池最大阻塞等待时间（使用负值表示没有限制）
        max-wait: ${REDIS_POOL_MAX_WAIT:-1ms}

# token配置
token:
    # 令牌自定义标识
    header: ${TOKEN_HEADER:Authorization}
    # 令牌密钥
    secret: ${TOKEN_SECRET:easywecom}
    # 令牌有效期（单位为分钟，默认为24小时）
    expireTime: ${TOKEN_EXPIRE_TIME:1440}

mybatis-plus:
   mapper-locations: classpath*:mapper/**/*Mapper.xml
   type-aliases-package: com.easyink.**.domain
   type-handlers-package: com.easyink.wecom.handler.GenericTypeHandler,com.easyink.framework.handler.StringArrayJoinTypeHandler
#   configuration: # 开发调试使用
#     log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
   global-config:
     db-config:
       logic-delete-field: delFlag
       logic-delete-value: 1
       logic-not-delete-value: 0


# PageHelper分页插件
pagehelper:
  helperDialect: mysql
  reasonable: true
  supportMethodsArguments: true
  params: count=countSql

knife4j:
  # 是否开启增强配置
  enable: true
  # 自定义文档集合，该属性是数组
  documents:
      # 所属分组
    - group: 1.0版本
      # 类似于接口中的tag,对于自定义文档的分组
      name: 其他文档
      # markdown文件路径,可以是一个文件夹(classpath:markdowns/*)，也可以是单个文件(classpath:md/sign.md)
      locations: classpath*:markdown/*
  # 前端Ui的个性化配置属性
  setting:
    # Ui默认显示语言,目前主要有两种:中文(zh-CN)、英文(en-US)
    language: zh-CN
    # 是否显示界面中SwaggerModel功能
    enableSwaggerModels: true
    # 是否显示界面中"文档管理"功能
    enableDocumentManage: true
    # 自定义model名称
    swaggerModelName: 实体类列表
    # 是否开启界面中对某接口的版本控制,如果开启，后端变化后Ui界面会存在小蓝点
    enableVersion: false
    # 是否在每个Debug调试栏后显示刷新变量按钮,默认不显示
    enableReloadCacheParameter: false
    # 调试Tab是否显示AfterScript功能,默认开启
    enableAfterScript: true
    # 具体接口的过滤类型
    enableFilterMultipartApiMethodType: POST
    # 针对RequestMapping的接口请求类型,在不指定参数类型的情况下,如果不过滤,默认会显示7个类型的接口地址参数,如果开启此配置,默认展示一个Post类型的接口地址
    enableFilterMultipartApis: false
    # 是否开启请求参数缓存
    enableRequestCache: true
    # 是否显示Footer
    enableFooter: false
    # 是否开启自定义Footer
    enableFooterCustom: true
    # 自定义Footer内容
    footerCustomContent: Apache License 2.0 | Copyright  2017-[厦门联络易科技有限公司](www.lianluoyi.cn)
  # 是否开启一个默认的跨域配置,该功能配合自定义Host使用
  cors: false
  # 是否开启生产环境保护策略
  production: ${KNIFE4J_PRODUCTION:true}
  # 对Knife4j提供的资源提供BasicHttp校验,保护文档
  basic:
    # 关闭BasicHttp功能
    enable: false
    # basic用户名
    username: apidoc
    # basic密码
    password: 123321



# 防止XSS攻击
xss:
  # 过滤开关
  enabled: true
  # 排除链接（多个用逗号分隔）
  excludes: /system/notice/*
  # 匹配链接
  urlPatterns: /system/*,/monitor/*,/tool/*

# elasticsearch配置
elasticsearch:
  # 是否开启
  open: ${ES_OPEN:false}
  # 协议类型
  schema: ${ES_SCHEMA:http}
  # 地址+端口号
  address: ${ES_ADDRESS:es:9200}
  # 用户名
  userName: ${ES_USER_NAME:""}
  # 密码
  password: ${ES_PASSWD:""}
  # 连接超时时间
  connectTimeout: ${ES_CONNECT_TIMEOUT:10000}
  # socket连接超时时间
  socketTimeout: ${ES_SOCKET_TIMEOUT:10000}
  # 获取连接请求超时时间
  connectionRequestTimeout: ${ES_CONNECTION_REQUEST_TIMEOUT:10000}
  # 最大连接数
  maxConnectNum: ${ES_MAX_CONNECT_NUM:100}
  # 每条路由的最大连接数
  maxConnectPerRoute: ${ES_MAX_CONNECT_PER_ROUTE:100}

# forest配置
forest:
  backend: httpclient
  retry-count: ${FOREST_RETRY_COUNT:1} # 请求失败后重试次数，默认为0次不重试
  max-retry-interval: ${FOREST_MAX_RETRY_INTERVAL:1000} #重试间隔时间
  connect-timeout: ${FOREST_CONNECT_TIMEOUT:3000} #链接超时时间
  timeout: ${FOREST_TIMEOUT:3000}  # 请求超时时间
  logEnabled: ${FOREST_LOG_ENABLED:false} # 打开或关闭日志（默认为 true）
  log-request: ${FOREST_LOG_REQUEST:false} # 打开/关闭Forest请求日志（默认为 true）
  log-response-status: ${FOREST_LOG_RESPONSE_STATUS:false} # 打开/关闭Forest响应状态日志（默认为 true）
  log-response-content: ${FOREST_LOG_RESPONSE_CONTENT:false}  # 打开/关闭Forest响应内容日志（默认为 false）
  variables: #全局变量 企微和微信接口地址
    weComServerUrl: ${FOREST_VARIABLES_WE_COM_SERVER_URL:https://qyapi.weixin.qq.com/}
    weComePrefix: ${FOREST_VARIABLES_WE_COME_PREFIX:cgi-bin}
    wxServerUrl: ${FOREST_VARIABLES_WX_SERVER_URL:https://api.weixin.qq.com/}
    wxServerPrefix: ${FOREST_VARIABLES_WE_SERVER_PREFIX:cgi-bin}
    wxPrefix: ${FOREST_VARIABLES_WX_PREFIX:sns}
    orderServerUrl: ${ORDER_SERVER_URL:}
    orderAccessId: ${ORDER_ACCESS_ID:}
    orderAccessKey: ${ORDER_ACCESS_KEY:}
  #converters:
  #  json:
  #    type: com.dtflys.forest.converter.json.ForestGsonConverter

wecome:
  chatKey: ${WE_COM_CHAT_KEY:chatdata}
  serverUrl: ${WE_COM_SERVER_URL:https://qyapi.weixin.qq.com/}
  weComePrefix: ${WE_COM_WE_COME_PREFIX:cgi-bin}
  noAccessTokenUrl:
          - /gettoken
          - /service/get_provider_token
          - /service/get_suite_token
          - /wecom/chat/collection/addCollection
          - /wecom/chat/collection/cancleCollection
          - /wecom/chat/collection/list
  needContactTokenUrl:
          - /user/create
          - /user/update
          - /user/delete
          - /user/batchdelete
          - /department/create
          - /department/update
          - /department/delete
          - /corp/get_join_qrcode
  fileUplodUrl:
          - /media/upload
          - /media/uploadimg
          - /media/upload_attachment
  needChatTokenUrl:
          - /msgaudit/get_permit_user_list
          - /msgaudit/check_single_agree
          - /msgaudit/check_room_agree
          - /msgaudit/groupchat/get
  # V1.36.0版本后，企微官方限制，客户联系Token不再使用，调用API凭证转到自建/代开发应用Token
  thirdAppUrl:
          - /user/getuserinfo
          - /get_jsapi_ticket
          - /ticket/get
          - /agent/list
          - /message/send
          - /agent/get
          - /agent/set
          - /externalcontact/get_follow_user_list
          - /externalcontact/add_contact_way
          - /externalcontact/update_contact_way
          - /externalcontact/del_contact_way
          - /externalcontact/get_contact_way
          - /externalcontact/add_corp_tag
          - /externalcontact/get_corp_tag_list
          - /externalcontact/del_corp_tag
          - /externalcontact/edit_corp_tag
          - /externalcontact/list
          - /externalcontact/get
          - /externalcontact/batch/get_by_user
          - /externalcontact/groupchat/list
          - /externalcontact/groupchat/get
          - /externalcontact/mark_tag
          - /externalcontact/transfer
          - /externalcontact/resigned/transfer_customer
          - /externalcontact/groupchat/transfer
          - /externalcontact/get_unassigned_list
          - /externalcontact/send_welcome_msg
          - /externalcontact/unionid_to_external_userid
          - /externalcontact/add_msg_template
          - /externalcontact/get_group_msg_result
          - /externalcontact/get_user_behavior_data
          - /externalcontact/groupchat/statistic
          - /externalcontact/groupchat/statistic_group_by_day
          - /externalcontact/remark
          - /externalcontact/transfer_customer
          - /externalcontact/transfer_result
          - /externalcontact/resigned/transfer_result
          - /externalcontact/group_welcome_template/add
          - /externalcontact/group_welcome_template/del
          - /externalcontact/group_welcome_template/edit
          - /externalcontact/groupchat/add_join_way
          - /externalcontact/groupchat/get_join_way
          - /externalcontact/groupchat/update_join_way
          - /externalcontact/groupchat/del_join_way
          - /externalcontact/unionid_to_external_userid
  needErrcodeUrl: # 如果有错误码需要单独业务处理,不抛出异常的接口
    - /externalcontact/get_group_msg_result
    - /externalcontact/del_corp_tag
  # 需要重试判断的code
  needRetryCode:
    - 45033

  # JS SDK 身份校验url
  authorizeUrl: ${WE_COM_AUTHORIZE_URL:https://open.weixin.qq.com/connect/oauth2/authorize}

## 会话存档公钥秘钥 (因为环境变量写空格会报错，这里填写的公钥私钥不需要前后缀,如 -----BEGIN RSA PRIVATE KEY-----\n 和\n-----END RSA PRIVATE KEY----- ，项目会自动拼接
chatrsakey:
  publicKey: ${CHAT_RSA_PUBLIC_KEY:}
  privateKey: ${CHAT_RSA_PRIVATE_KEY:}

## 微信小程序,公众号和第三方平台配置(小程序活码与使用雷达，智能表单需要配置)
wechatopen:
    miniApp: # 小程序配置
      appId: ${MINI_APP_ID:}
      appSecret: ${MINI_APP_SECRET:}
      ## 	要打开的小程序版本。正式版为 "release"，体验版为"trial"，开发版为"develop"，仅在微信外打开时生效。
      envVersion: ${MINI_APP_ENV_VERSION:}
      needTokenUrl:
        - /wxa/generate_urllink
    officialAccount: # 公众号配置 自建应用需要配置域名
      domain: ${OFFICIAL_ACCOUNT_DOMAIN:} # 域名 同时是中间页的地址
      appId: ${OFFICIAL_ACCOUNT_APPID:}
      appSecret: ${OFFICIAL_ACCOUNT_SECRET:}
      needTokenUrl:
        - /cgi-bin/user/info
    platform3rdAccount: # 第三方平台配置 代开发应用需要配置
      appId: ${PLATFORM_3RD_APPID:}
      appSecret: ${PLATFORM_3RD_SECRET:}
      domain: ${PLATFORM_3RD_DOMAIN:}  # 第三方平台-公众号开发域名 同时是中间页的地址
      aesKey: ${PLATFORM_3RD_AES_KEY:} # 消息加解密Key
      componentToken: ${PLATFORM_3RD_COMPONENT_TOKEN:} # 消息校验Token
      authInitPageDomain: ${PLATFORM_3RD_AUTH_INIT_PAGE_DOMAIN:} # 登录授权的发起页域名
      needTokenUrl:
        - /component/api_query_auth
        - /component/api_create_preauthcode
        - /component/api_authorizer_token
        - /component/api_get_authorizer_info

decrypt:
    # 解密unionId的密钥
    unionIdKey: ${DECRYPT_UNIONID_KEY:}
#线程池参数配置
thread-pool-prop:
#  回调处理线程池参数
  handleCallback:
    corePoolSize: ${THREAD_POOL_HANDLE_CALLBACK_CORE_SIZE:50}
    maxPoolSize: ${THREAD_POOL_HANDLE_CALLBACK_MAX_SIZE:200}
    queueCapacity: ${THREAD_POOL_HANDLE_CALLBACK_QUEUE_SIZE:120}
#  表单处理线程池参数
  formTask:
    corePoolSize: ${THREAD_POOL_FORM_TASK_CORE_SIZE:20}
    maxPoolSize: ${THREAD_POOL_FORM_TASK_MAX_SIZE:100}
    queueCapacity: ${THREAD_POOL_FORM_TASK_QUEUE_SIZE:30}
#  批量打标签线程池参数
  batchTag:
    corePoolSize: ${THREAD_POOL_BATCH_TAG_CORE_SIZE:50}
    maxPoolSize: ${THREAD_POOL_BATCH_TAG_MAX_SIZE:200}
    queueCapacity: ${THREAD_POOL_BATCH_TAG_QUEUE_SIZE:100}
#  同步回调客户线程池参数
  syncCustomer:
    corePoolSize: ${THREAD_POOL_SYNC_CUSTOMER_CORE_SIZE:50}
    maxPoolSize: ${THREAD_POOL_SYNC_CUSTOMER_MAX_SIZE:200}
    queueCapacity: ${THREAD_POOL_SYNC_CUSTOMER_QUEUE_SIZE:100}
#  转发回调线程池参数
  sendCallback:
    corePoolSize: ${THREAD_POOL_SEND_CALLBACK_CORE_SIZE:50}
    maxPoolSize: ${THREAD_POOL_SEND_CALLBACK_MAX_SIZE:200}
    queueCapacity: ${THREAD_POOL_SEND_CALLBACK_QUEUE_SIZE:100}
#  获取员工执行群发结果线程池参数(因为企微官方接口频率限制，所以这个线程池的最大线程数限制为5）
  messageResultTask:
    corePoolSize: ${THREAD_POOL_SEND_CALLBACK_CORE_SIZE:5}
    maxPoolSize: ${THREAD_POOL_SEND_CALLBACK_MAX_SIZE:5}

# prometheus配置
management:
  endpoints:
    web:
      exposure:
        include: '*'
  metrics:
    tags:
      application: ${spring.application.name}
    export:
      prometheus:
        pushgateway:
          enabled: false
          base-url: #[*]
          push-rate: 15s
          job: ${spring.application.name}